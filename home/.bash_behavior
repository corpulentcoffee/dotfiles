# shellcheck shell=bash
# This is sourced from `.bash_aliases` under interactive bash; see notes there.

export EDITOR=vi # safe fallback, even on BusyBox systems
if command -v vim &>/dev/null; then
  EDITOR=vim
fi

# Increase bash history size.
HISTSIZE=100000
HISTFILESIZE=500000

# Improve `less` paging. This affects all usage, but is motivated by git where
# `FRX` is exported if `LESS` is not set (see `core.pager` on `man git-config`):
#
# - retain 'F' to avoid paging if there is less than one screenful of output
# - add 'I' to enable case-insensitive searches by default
# - retain 'R' allow color codes to work
# - add 'S' to scroll long lines instead of wrapping
# - drop 'X' to enable mouse and touchpad scrolling
export LESS='FIRS'

# Avail `nvm` and automatically activate Node environment as given by `.nvmrc`
# files. `NVM_DIR` can be specified explicitly elsewhere, like machine-specific
# not-version-controlled `~/.profile` file to make it visible higher in process
# tree (e.g. to desktop environment apps), but elsewise will be automatically
# detected and set here if nvm is in the normal place. Under GitHub Codespaces,
# `nvm` is already available and installed to `~/.nvm`, and NVS is the preferred
# way of doing things anyway, so just skip this setup if running in Codespaces.
if [[ ! -v CODESPACES ]]; then
  if [[ ! -v NVM_DIR && -d ~/.nvm && -f ~/.nvm/nvm.sh ]]; then
    export NVM_DIR=~/.nvm
  fi
  if [[ -v NVM_DIR && -d "$NVM_DIR" && -f "$NVM_DIR/nvm.sh" ]]; then
    # `--no-use` avoids delay of activating `default` environment for new shells.
    # shellcheck source=/dev/null
    source "$NVM_DIR/nvm.sh" --no-use &&

      # Explicitly call `nvm use` when `.nvmrc` is present or version it has
      # changes (due to, e.g., changing directories, moving git `HEAD`, altering
      # contents manually). Calling `nvm use` explicitly also prints activated
      # environment and triggering `.nvmrc`. This is one of *many* ways to do
      # this; see <https://github.com/nvm-sh/nvm#deeper-shell-integration>.
      function __ccdotfiles_promptCommandNvmrc {
        local nvmrc
        nvmrc=$(nvm_find_nvmrc)

        local version
        [ -n "$nvmrc" ] && version=$(<"$nvmrc")

        if [ -n "$version" ]; then
          if [ "$version" != "$__ccdotfiles_promptCommandNvmrc_last" ]; then
            nvm use
            __ccdotfiles_promptCommandNvmrc_last=$version
          fi
        elif [ -n "$__ccdotfiles_promptCommandNvmrc_last" ]; then
          nvm deactivate
          unset __ccdotfiles_promptCommandNvmrc_last
        fi
      } &&
        PROMPT_COMMAND="__ccdotfiles_promptCommandNvmrc; $PROMPT_COMMAND"
  fi
fi

# Try to use `keychain` as an `ssh-agent` wrapper if we're running under WSL
# without another SSH agent running. If any keys exist in `~/.ssh`, pass them as
# positionals to `keychain`. This is usually already wired up on regular Ubuntu
# by the desktop environment to the login user's keyring.
if [[ -v WSLENV && ! -v SSH_AGENT_PID && ! -v SSH_AUTH_SOCK && -d ~/.ssh ]] &&
  command -v keychain &>/dev/null; then
  # shellcheck source=/dev/null
  find ~/.ssh -name '*.pub' -prune -o -type f -name 'id_*' -print0 |
    xargs -0 -- keychain --agents ssh -- &&
    source "$HOME/.keychain/$HOSTNAME-sh"
fi

# Print status code after each command finishes. This checks `$?`, so it needs
# to be the first thing executed on `$PROMPT_COMMAND`, so try to define this as
# late as possible during shell initialization.
function __ccdotfiles_promptCommandExitStatus {
  local status=$?

  # Display newline after output to guarantee prompt appears on its own even if
  # last output didn't have trailing newline; it's nice to have this here
  # instead of `PS1` in case something prepends onto `PS1` (e.g. `virtualenv`s).
  echo

  if [ "$status" != 0 ]; then
    echo -e "\\e[0;41mexit status $status\\e[0m"
  fi
}
PROMPT_COMMAND="__ccdotfiles_promptCommandExitStatus; $PROMPT_COMMAND"

# Given a regular bash prompt ending in '$ ', if we have `__git_ps1` *or* it
# appears that we *will* have it before the bash prompt gets displayed (as on
# Ubuntu, as a sort of hack, where `/etc/bash_completion.d/git-prompt` sources
# `/usr/lib/git-core/git-sh-prompt`, which happens later after we're done here).
if [[ $PS1 == *'\$ ' ]] &&
  (
    command -v __git_ps1 &>/dev/null ||
      [ -f /etc/bash_completion.d/git-prompt ] && [ -f /usr/lib/git-core/git-sh-prompt ]
  ); then
  PS1=${PS1/%\\\$ /\$(GIT_PS1_SHOWDIRTYSTATE=1 GIT_PS1_SHOWSTASHSTATE=1 GIT_PS1_SHOWUNTRACKEDFILES=1 GIT_PS1_SHOWUPSTREAM=auto __git_ps1)\\\$ }
fi
